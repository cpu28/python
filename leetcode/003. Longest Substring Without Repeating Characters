Question:

Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.





Solution:

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        max_substr=""
        max_length=0
    
        l=len(s)
        if(l<=1):
            return l
        for x in range(0,l):
            substr=""
            length=0
            st=s[x::]
            for letter in st:
                if letter not in substr:
                    substr+=letter
                    length+=1
                else:
                    if(length>max_length):
                        max_length=length
                        max_substr=substr
                    substr=""
                    length=0
                max_length=max(length, max_length)        
        return max_length
